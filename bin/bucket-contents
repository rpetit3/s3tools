#! /usr/bin/env python
"""
bucket-contents.

Print a list of the contents within a bucket.
"""


def size(num):
    """
    See the following link.

    http://www.guguncube.com/1648/python-human-readable-bytes-as-kb-mb-gb-tb
    """
    for x in ['bytes', 'KB', 'MB', 'GB']:
        if num < 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0
    return "%3.1f%s" % (num, 'TB')

if __name__ == '__main__':
    import sys
    import argparse as ap
    from boto.s3.connection import S3Connection

    from aws_keys import AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY

    parser = ap.ArgumentParser(
        prog='bucket-contents',
        conflict_handler='resolve',
        description='Print a list of the contents within a bucket.')
    group1 = parser.add_argument_group('Options', '')
    group1.add_argument('--bucket', metavar="STR", type=str, required=True,
                        help='Bucket to read contents of.')
    group1.add_argument('--bucket_path', metavar="STR", type=str,
                        help='Specific path in bucket. (Default: /)',
                        default="")
    group1.add_argument('--limit', metavar="INT", type=int,
                        help='Limit total number of lines. (Default: All)',
                        default=False)
    group1.add_argument('--print_size', action='store_true', default=False,
                        help='Print size of file in bytes.')
    group1.add_argument('--human_readable', action='store_true', default=False,
                        help='Print size in a human readable form.')
    group1.add_argument('-h', '--help', action='help',
                        help='Show this help message and exit')

    if len(sys.argv) == 1:
        parser.print_usage()
        sys.exit(1)

    args = parser.parse_args()

    conn = S3Connection(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
    bucket = conn.get_bucket(args.bucket)

    rs = bucket.list(args.bucket_path)

    total = 0
    for key in rs:
        total += 1
        if args.limit and total > args.limit:
            break
        else:
            if args.print_size:
                if args.human_readable:
                    print "{0}\t{1}".format(key.name, size(key.size))
                else:
                    print "{0}\t{1}".format(key.name, key.size)
            else:
                print key.name
